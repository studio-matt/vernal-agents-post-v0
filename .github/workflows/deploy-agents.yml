name: Deploy Agents Backend

on:
  # DISABLED - Manual deployments only
  # push:
  #   branches: [ "main", "mcp-conversion" ]
  workflow_dispatch:  # Manual trigger only

jobs:
  deploy:
    name: Deploy Agents
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Deploy on Agents Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.AGENTS_EC2_SSH_KEY }}
        passphrase: ${{ secrets.EC2_SSH_PASSPHRASE }}
        script: |
          set -e
          echo "🔒 BULLETPROOF BACKEND DEPLOYMENT STARTING..."

          # 0. Ensure jq is installed for JSON validation
          sudo apt-get update && sudo apt-get install -y jq

          # 1. Nuke old code completely
          echo "🧹 Nuking old code..."
          sudo systemctl stop vernal-agents || true
          
          # Let systemd handle process management - don't kill processes manually
          echo "⏳ Allowing systemd to manage processes..."
          sleep 2
          
          # More aggressive cleanup for stubborn files
          echo "🧹 Force removing stubborn files..."
          sudo find /home/ubuntu/vernal-agents-post-v0 -type f -exec rm -f {} + 2>/dev/null || true
          sudo find /home/ubuntu/vernal-agents-post-v0 -type d -exec rmdir {} + 2>/dev/null || true
          sudo rm -rf /home/ubuntu/vernal-agents-post-v0
          
          # Try harder removal loop for stuck files
          echo "🔄 Trying harder to remove directory..."
          for i in {1..3}; do
            if [ -d /home/ubuntu/vernal-agents-post-v0 ]; then
              echo "❌ Directory still exists, trying harder to remove it (attempt $i)..."
              sudo rm -rf /home/ubuntu/vernal-agents-post-v0
              sleep 2
            fi
          done
          
          # Log remaining files if still stuck
          if [ -d /home/ubuntu/vernal-agents-post-v0 ]; then
            echo "❌ Directory could not be fully deleted. Showing contents:"
            sudo find /home/ubuntu/vernal-agents-post-v0
            exit 1
          fi

          # Clean up old backup directories
          echo "🧹 Cleaning up old backup directories..."
          find /home/ubuntu -maxdepth 1 -name "vernal-agents*backup*" -type d -exec sudo rm -rf {} + 2>/dev/null || true
          find /home/ubuntu -maxdepth 1 -name "vernal-agents*corrupted*" -type d -exec sudo rm -rf {} + 2>/dev/null || true
          echo "✅ Backup directories cleaned up"

          # 2. Clone fresh from GitHub
          echo "📦 Cloning fresh from GitHub..."
          git clone https://github.com/studio-matt/vernal-agents-post-v0.git /home/ubuntu/vernal-agents-post-v0
          cd /home/ubuntu/vernal-agents-post-v0

          # 3. Setup venv from scratch
          echo "🐍 Setting up virtual environment..."
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

          # CRITICAL: Validate main.py defines FastAPI app
          echo "🔍 Validating main.py..."
          test -f main.py || { echo "ERROR: main.py not found!"; exit 1; }
          grep -q "app = FastAPI" main.py || { echo "ERROR: main.py must define app = FastAPI()!"; exit 1; }
          grep -q "from fastapi import FastAPI" main.py || { echo "ERROR: main.py must import FastAPI!"; exit 1; }
          echo "✅ main.py validation passed"

          # 4. Copy and validate environment variables
          echo "🔐 Setting up environment..."
          sudo cp /etc/environment .env
          sudo chown ubuntu:ubuntu .env
          chmod 600 .env

          # Validate critical environment variables
          echo "🔍 Validating environment variables..."
          REQUIRED_VARS=("DB_HOST" "DB_USER" "DB_PASSWORD" "DB_NAME" "OPENAI_API_KEY")
          MISSING_VARS=()

          for var in "${REQUIRED_VARS[@]}"; do
              if ! grep -q "^${var}=" .env; then
                  MISSING_VARS+=("$var")
              fi
          done

          if [ ${#MISSING_VARS[@]} -ne 0 ]; then
              echo "❌ Missing required environment variables:"
              printf '%s\n' "${MISSING_VARS[@]}"
              echo "Please update /etc/environment or provide a complete .env file"
              exit 1
          fi

          echo "✅ All required environment variables present"

          # 5. Overwrite systemd unit (always)
          echo "⚙️ Configuring systemd service..."
          sudo tee /etc/systemd/system/vernal-agents.service > /dev/null << 'SERVICE_EOF'
          [Unit]
          Description=Vernal Agents Backend
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/home/ubuntu/vernal-agents-post-v0
          ExecStart=/home/ubuntu/vernal-agents-post-v0/venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000
          Restart=always
          RestartSec=10
          Environment=PYTHONPATH=/home/ubuntu/vernal-agents-post-v0
          EnvironmentFile=/home/ubuntu/vernal-agents-post-v0/.env

          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF

          # 6. Reload and start service
          echo "🔄 Starting service..."
          sudo systemctl daemon-reload
          sudo systemctl start vernal-agents

          # 7. Wait for startup
          echo "⏳ Waiting for service startup..."
          sleep 10

          # Check service status and logs
          echo "🔍 Checking service status..."
          sudo systemctl status vernal-agents --no-pager
          echo "🔍 Checking service logs..."
          sudo journalctl -u vernal-agents -n 20 --no-pager

          # 8. Automated post-deploy validation (MANDATORY)
          echo "✅ Running post-deploy validation..."

          # Health check with retry
          echo "🔍 Testing health endpoint..."
          for i in {1..5}; do
            echo "Attempt $i/5..."
            if curl -f http://localhost:8000/health; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "❌ Health check failed on attempt $i, waiting 3 seconds..."
              sleep 3
              if [ $i -eq 5 ]; then
                echo "❌ Health check failed after 5 attempts!"
                exit 1
              fi
            fi
          done
          echo "✅ Health check passed"

          # Version check
          echo "🔍 Testing version endpoint..."
          VERSION_RESPONSE=$(curl -s http://localhost:8000/version)
          echo "$VERSION_RESPONSE" | jq . || { echo "❌ Version endpoint returned invalid JSON!"; exit 1; }
          echo "✅ Version check passed"

          # Database test
          echo "🔍 Testing database connectivity..."
          curl -f http://localhost:8000/mcp/enhanced/health || { echo "❌ Database test failed!"; exit 1; }
          echo "✅ Database test passed"

          # Systemd status
          echo "🔍 Checking systemd status..."
          sudo systemctl status vernal-agents --no-pager || { echo "❌ Service not running!"; exit 1; }
          echo "✅ Service is running"

          # Port check
          echo "🔍 Checking port 8000..."
          if ! sudo lsof -i :8000 >/dev/null 2>&1; then
            echo "❌ Port 8000 is not listening!"
            echo "🔍 Checking systemd logs for errors..."
            sudo journalctl -u vernal-agents -n 50 --no-pager
            echo "🔍 Verifying main.py defines app = FastAPI()..."
            grep -q "app = FastAPI" main.py || echo "❌ main.py does not define app = FastAPI()!"
            echo "🔍 Common causes: code bug, missing dependency, or main.py does not define app = FastAPI()"
            exit 1
          fi
          echo "✅ Port 8000 is listening"

          # External access test
          echo "🔍 Testing external access..."
          curl -f https://themachine.vernalcontentum.com/health || { echo "❌ External health check failed!"; exit 1; }
          curl -f https://themachine.vernalcontentum.com/version || { echo "❌ External version check failed!"; exit 1; }
          curl -f https://themachine.vernalcontentum.com/mcp/enhanced/health || { echo "❌ External database test failed!"; exit 1; }
          echo "✅ External access working"

          # 9. Log successful deployment
          COMMIT_HASH=$(git rev-parse HEAD)
          PYTHON_VERSION=$(python --version)
          echo "$(date) - BULLETPROOF Backend deployed successfully via GitHub Actions, commit: $COMMIT_HASH, Python: $PYTHON_VERSION" >> ~/vernal_agents_deploy.log

          echo "🎉 BULLETPROOF BACKEND DEPLOYMENT SUCCESSFUL!"
          echo "📝 Deployment logged to ~/vernal_agents_deploy.log"
