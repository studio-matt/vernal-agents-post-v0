name: Deploy Agents (Docker with High Memory)

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  deploy:
    name: Deploy Agents (Docker High Memory)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Generate locked requirements with lower bounds
      run: |
        echo "🔧 Generating requirements-locked.txt with lower bounds..."
        echo "📋 This prevents 'resolution-too-deep' errors by using >= constraints"
        
        # CRITICAL: Force pip<25.0 for pip-tools compatibility
        # pip-tools 7.x doesn't support pip 25.x (AttributeError: 'InstallRequirement' object has no attribute 'use_pep517')
        # CRITICAL: Upgrade pip-tools to >=7.4.0 for pip 24.x compatibility
        pip install "pip<25.0" setuptools wheel "pip-tools>=7.4.0"
        
        # CRITICAL: Use python -m piptools to ensure we use the installed version, not old global binary
        # Generate locked requirements from requirements.in (with lower bounds)
        python -m piptools compile requirements.in --output-file requirements-locked.txt
        
        # CRITICAL: Do NOT upgrade pip after pip-compile - keep pip<25.0 throughout
        # pip upgrade here breaks pip-tools compatibility
        
        # Show what was generated
        echo "✅ Generated requirements-locked.txt:"
        echo "📊 Total lines: $(wc -l < requirements-locked.txt)"
        echo "🔍 First 15 dependencies:"
        head -15 requirements-locked.txt
        echo ""
        echo "🔍 Last 5 dependencies:"
        tail -5 requirements-locked.txt
        
    - name: Build Docker image
      run: |
        docker build -f Dockerfile.deploy -t vernal-agents:latest .
        
    - name: Deploy on Agents Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.AGENTS_EC2_SSH_KEY }}
        passphrase: ${{ secrets.EC2_SSH_PASSPHRASE }}
        script: |
          set -e
          echo "🐳 DOCKER HIGH-MEMORY DEPLOYMENT STARTING..."
          
          # 1. Stop existing services
          echo "🛑 Stopping existing services..."
          sudo systemctl stop vernal-agents || true
          docker stop vernal-agents-container || true
          docker rm vernal-agents-container || true
          
          # 2. Clean up old images
          echo "🧹 Cleaning up old Docker images..."
          docker image prune -f
          
          # 3. Pull latest code
          echo "📦 Pulling latest code..."
          cd /home/ubuntu
          rm -rf vernal-agents-post-v0
          git clone https://github.com/studio-matt/vernal-agents-post-v0.git vernal-agents-post-v0
          cd vernal-agents-post-v0
          
          # 4. Build Docker image with memory allocation
          echo "🐳 Building Docker image..."
          docker build -f Dockerfile.deploy -t vernal-agents:latest .
          
          # 5. Run container with high memory allocation
          echo "🚀 Starting container with high memory..."
          docker run -d \
            --name vernal-agents-container \
            --restart unless-stopped \
            -p 8000:8000 \
            --memory=8g \
            --memory-swap=12g \
            -e DB_HOST="$DB_HOST" \
            -e DB_USER="$DB_USER" \
            -e DB_PASSWORD="$DB_PASSWORD" \
            -e DB_NAME="$DB_NAME" \
            -e PYTHONPATH="/app" \
            vernal-agents:latest
          
          # 6. Wait for container to start
          echo "⏳ Waiting for container to start..."
          sleep 30
          
          # 7. Health check
          echo "🔍 Health check..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ Container is healthy"
              break
            fi
            echo "⏳ Waiting for health check... (attempt $i/30)"
            sleep 2
          done
          
          if ! curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "❌ Container health check failed!"
            docker logs vernal-agents-container
            exit 1
          fi
          
          # 8. Test external access
          echo "🔍 Testing external access..."
          curl -f https://themachine.vernalcontentum.com/health || { echo "❌ External health check failed!"; exit 1; }
          
          # 9. Write completion marker
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "DEPLOY_COMPLETE_$(date +%s)_$COMMIT_HASH" > /home/ubuntu/vernal_agents_deploy_complete.txt
          
          echo "🎉 DOCKER HIGH-MEMORY DEPLOYMENT SUCCESSFUL!"
          echo "🔗 Commit: $COMMIT_HASH"
          echo "🐳 Container: vernal-agents-container"
          echo "💾 Memory: 4GB allocated"
